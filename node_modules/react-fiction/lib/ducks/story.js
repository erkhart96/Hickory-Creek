// wondering what a duck is? well, it's a bird, you silly goose. :-)
// for real, see here: https://github.com/erikras/ducks-modular-redux

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = reducer;
exports.addRoom = addRoom;
exports.updateData = updateData;
exports.updateCurrentRoom = updateCurrentRoom;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ADD_ROOM = 'react-fiction/story/ADD_ROOM';
var UPDATE_DATA = 'react-fiction/story/UPDATE_DATA';
var UPDATE_CURRENT_ROOM = 'react-fiction/story/UPDATE_CURRENT_ROOM';

function reducer(state, action) {
  if (state === undefined) state = {
    rooms: {},
    data: {
      'react-fiction/story': {}
    },
    currentRoom: '',
    history: []
  };

  switch (action.type) {
    case ADD_ROOM:
      return _extends({}, state, {
        rooms: _extends({}, state.rooms, _defineProperty({}, action.key, action.room))
      });
    case UPDATE_DATA:
      return _extends({}, state, {
        data: _extends({}, state.data, _defineProperty({}, action.key, action.data))
      });
    case UPDATE_CURRENT_ROOM:
      if (state.currentRoom !== '') {
        state.history.unshift(state.currentRoom);
      }

      return _extends({}, state, {
        currentRoom: action.currentRoom
      });
    default:
      return state;
  }
}

function addRoom(key, room) {
  return {
    type: ADD_ROOM,
    key: key, room: room
  };
}

function updateData(key, data) {
  return {
    type: UPDATE_DATA,
    key: key, data: data
  };
}

function updateCurrentRoom(currentRoom) {
  return {
    type: UPDATE_CURRENT_ROOM,
    currentRoom: currentRoom
  };
}